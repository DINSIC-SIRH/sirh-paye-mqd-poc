<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project activeEnvironment="Default" name="Relais IVTR DiffusionHorsSite" resourceRoot="" soapui-version="5.2.1" id="263b7528-42ec-4015-9324-c136e28ab544" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="HorsSite_Req_CheckStatus" type="rest" id="15592022-7fb3-45d1-a0d2-bf42b516f7e9" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:endpoints><con:endpoint>http://10.128.106.70:8080</con:endpoint><con:endpoint>http://emission.pprod.relais-ivtr.stif.info:8080</con:endpoint><con:endpoint>http://emission.prod.relais-ivtr.stif.info:8080</con:endpoint><con:endpoint>http://emission.recette.relais-ivtr.stif.info:8080</con:endpoint></con:endpoints><con:resource name="RelaisStatus" path="/emission/IVTR/envoiComplet/relaisStatus/" id="6db8033f-ad41-4986-8200-6540a3db3f51"><con:settings/><con:parameters/><con:method name="RelaisStatus" method="GET" id="d9331749-fb53-43ec-b125-7caec25ed05f"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/plain;charset=ISO-8859-1</con:mediaType><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>503</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="Request 1" mediaType="application/json" id="d1e75d22-bff7-4ff5-83dd-12ef38063f53"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.128.106.70:8080</con:endpoint><con:request/><con:originalUri>http://10.128.107.70/emission/IVTR/envoiComplet/relaisStatus/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:restMockService port="8080" path="/" host="PRESTA-ARTIMON" name="DiffuseurHorsSite_Mock" docroot="" id="59a14497-1bd4-4669-a5ec-5f80eb550eb5"><con:settings/><con:properties/><con:restMockAction name="POST /IVTR/queue" method="POST" resourcePath="/IVTR/queue" id="05d41b1e-c3d4-479e-b931-446f09f637da"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200" mediaType="text/xml" id="29f0681b-b253-45ee-8985-9722fb2aea5f"><con:settings/><con:responseContent/><con:header><con:name>isOK</con:name><con:value>true</con:value></con:header></con:response></con:restMockAction><con:restMockAction name="GET /IVTR/queue" method="GET" resourcePath="/IVTR/queue" id="a761584c-61c6-4e8e-ad4c-6af3da9886cf"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200" mediaType="text/xml" id="fec890d7-367f-46e4-b4af-b7cda4de8c11"><con:settings/><con:responseContent/><con:header><con:name>isOK</con:name><con:value>true</con:value></con:header></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:sensitiveInformation/></con:soapui-project>